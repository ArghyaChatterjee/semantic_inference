<launch>

    <!-- start_manager required if used stand-alone -->
    <arg name="start_manager" default="true"/>
    <!-- launch file features -->
    <arg name="enable_rectification" default="false"/>
    <arg name="enable_pointcloud" default="false"/>
    <arg name="use_prerecorded_semantics" default="false"/>
    <!-- input configuration -->
    <arg name="rgb_image_transport" default="raw"/>
    <arg name="min_separation_s" default="0.0"/>
    <arg name="throttle_rate_prerecorded" default="15.0"/>
    <arg name="throttle_prerecorded" default="false"/>
    <arg name="pointcloud_queue_size" default="20"/>
    <arg name="max_image_queue_size" default="1"/>

    <!-- input topic names -->
    <arg name="prerecorded_topic" default="labels/image_raw"/>
    <arg name="rgb_topic" default="rgb/image_raw"/>
    <arg name="rgb_info_topic" default="rgb/camera_info"/>
    <arg name="depth_topic" default="depth/image_rect_raw"/>
    <arg name="depth_info_topic" default="depth/camera_info"/>
    <arg name="semantic_topic" default="semantic/image_raw"/>
    <arg name="semantic_color_topic" default="semantic_inference/semantic_color/image_raw"/>
    <!-- output topic names -->
    <arg name="pointcloud_topic" default="/semantic_pointcloud"/>

    <!-- segmentation model options. Make sure you have one downloaded -->
    <!--<arg name="model_name" default="mobilenetv2_360_640"/>-->
    <!--<arg name="model_name" default="hrnetv2_360_640_v12"/>-->
    <arg name="model_name" default="efficientvit_seg_l2"/>
    <!--<arg name="model_name" default="ade20k-hrnetv2-c1"/>-->
    <!--<arg name="model_name" default="ade20k-mobilnetv2dilated-c1_deepsup"/>-->
    <!--<arg name="model_name" default="ade20k-efficientvit_seg_l2"/>-->
    <!-- segmentation model configuration -->
    <arg name="model_path" value="$(find semantic_inference)/models/$(arg model_name).onnx"/>
    <arg name="engine_path" value="$(find semantic_inference)/engines/$(arg model_name).trt"/>
    <arg name="segmenter_config" value="$(find semantic_inference)/config/models/$(arg model_name).yaml"/>
    <arg name="rotation_type" default="none"/>
    <arg name="force_rebuild" default="false" doc="force TensorRT to rebuild engine file"/>

    <!-- colormap and label grouping -->
    <arg name="labelspace_name" default="ade20k_indoor"/>
    <arg name="label_grouping" value="$(find semantic_inference)/config/label_groupings/$(arg labelspace_name).yaml"/>
    <arg name="colormap_path" value="$(find semantic_inference)/config/colors/$(arg labelspace_name).csv"/>

    <!-- debugging and output -->
    <arg name="debug" default="false"/>
    <arg name="launch-prefix" value="gdb -ex run --args" if="$(arg debug)"/>
    <arg name="launch-prefix" value="" unless="$(arg debug)"/>
    <arg name="verbose" default="true"/>
    <arg name="desired_output" value="screen" if="$(arg verbose)"/>
    <arg name="desired_output" value="log" unless="$(arg verbose)"/>

    <!-- manager -->
    <node pkg="nodelet" type="nodelet" name="nodelet_manager"
          args="manager"
          if="$(arg start_manager)"
          launch-prefix="$(arg launch-prefix)"
          output="$(arg desired_output)"
          required="true">
      <param name="image_transport" value="$(arg rgb_image_transport)"/>
    </node>

    <!-- main nodes to segment and recolor images -->
    <node pkg="nodelet" type="nodelet" name="semantic_inference"
          args="load semantic_inference/segmentation nodelet_manager --no-bond"
          output="$(arg desired_output)"
          unless="$(arg use_prerecorded_semantics)"
          required="true">
        <rosparam file="$(arg segmenter_config)" command="load"/>
        <rosparam file="$(arg label_grouping)" command="load" ns="output/recolor"/>
        <param name="output/recolor/colormap_path" value="$(arg colormap_path)"/>
        <param name="max_queue_size" value="$(arg max_image_queue_size)"/>
        <param name="image_separation_s" value="$(arg min_separation_s)"/>
        <param name="rotation_type" value="$(arg rotation_type)"/>
        <param name="segmenter/model/model_file" value="$(arg model_path)"/>
        <param name="segmenter/model/engine_file" value="$(arg engine_path)"/>
        <param name="segmenter/model/force_rebuild" value="$(arg force_rebuild)"/>
        <remap from="~image_raw" to="$(arg rgb_topic)"/>
        <remap from="~image_raw/compressed" to="$(arg rgb_topic)/compressed"/>
        <remap from="~semantic/image_raw" to="$(arg semantic_topic)"/>
    </node>

    <node pkg="nodelet" type="nodelet" name="recolor_nodelet"
          args="load semantic_inference/recolor nodelet_manager --no-bond"
          output="$(arg desired_output)"
          if="$(arg use_prerecorded_semantics)"
          required="true">
        <rosparam file="$(arg color_config)" command="load" ns="output/recolor"/>
        <remap from="labels/image_raw" to="$(arg prerecorded_topic)" unless="$(arg throttle_prerecorded)"/>
        <remap from="labels/image_raw" to="$(arg prerecorded_topic)_throttle" if="$(arg throttle_prerecorded)"/>
        <remap from="labels/image_raw/compressed" to="$(arg prerecorded_topic)/compressed"/>
        <remap from="~semantic/image_raw" to="$(arg semantic_topic)"/>
        <remap from="~semantic_color/image_raw" to="$(arg semantic_color_topic)"/>
    </node>

    <!-- utility nodelets -->
    <node pkg="topic_tools" type="throttle" name="rgb_throttle"
          args="messages $(arg prerecorded_topic) $(arg throttle_rate_prerecorded)"
          if="$(arg throttle_prerecorded)"/>

    <node pkg="nodelet" type="nodelet" name="depth_rectifier"
          args="load depth_image_proc/register nodelet_manager --no-bond"
          output="$(arg desired_output)"
          if="$(arg enable_rectification)"
          required="true">
        <remap from="rgb/camera_info" to="$(arg rgb_info_topic)"/>
        <remap from="depth/image_rect" to="$(arg depth_topic)"/>
        <remap from="depth/camera_info" to="$(arg depth_info_topic)"/>
    </node>

    <!-- pointcloud -->
    <node pkg="nodelet" type="nodelet" name="cloudify"
          args="load depth_image_proc/point_cloud_xyzrgb nodelet_manager --no-bond"
          output="$(arg desired_output)"
          if="$(arg enable_pointcloud)"
          required="true">

        <remap from="rgb/camera_info" to="$(arg rgb_info_topic)"/>
        <remap from="rgb/image_rect_color" to="$(arg semantic_color_topic)"/>
        <remap from="depth_registered/image_rect" to="$(arg depth_topic)" unless="$(arg enable_rectification)"/>
        <remap from="depth_registered/points" to="$(arg pointcloud_topic)"/>
        <param name="queue_size" value="$(arg pointcloud_queue_size)"/>
    </node>

</launch>
